Deployment 看似简单，但实际上，它实现了 Kubernetes 项目中一个非常重要的功能：Pod 的“水平扩展 / 收缩”（horizontal scaling out/in）。这个功能，是从 PaaS 时代开始，一个平台级项目就必须具备的编排能力。
举个例子，如果你更新了 Deployment 的 Pod 模板（比如，修改了容器的镜像），那么 Deployment 就需要遵循一种叫作“滚动更新”（rolling update）的方式，来升级现有的容器。
而这个能力的实现，依赖的是 Kubernetes 项目中的一个非常重要的概念（API 对象）：ReplicaSet。

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-set
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
从这个 YAML 文件中，我们可以看到，一个 ReplicaSet 对象，其实就是由副本数目的定义和一个 Pod 模板组成的。不难发现，它的定义其实是 Deployment 的一个子集。
更重要的是，Deployment 控制器实际操纵的，正是这样的 ReplicaSet 对象，而不是 Pod 对象。
Deployment-->ReplicaSet-->Pod
其中，ReplicaSet 负责通过“控制器模式”，保证系统中 Pod 的个数永远等于指定的个数（比如，3 个）。这也正是 Deployment 只允许容器的 restartPolicy=Always 的主要原因：只有在容器能保证自己始终是 Running 状态的前提下，ReplicaSet 调整 Pod 的个数才有意义。
而在此基础上，Deployment 同样通过“控制器模式”，来操作 ReplicaSet 的个数和属性，进而实现“水平扩展 / 收缩”和“滚动更新”这两个编排动作。
其中，“水平扩展 / 收缩”非常容易实现，Deployment Controller 只需要修改它所控制的 ReplicaSet 的 Pod 副本个数就可以了。
1、水平扩展
把副本数该为2，原本为3，改为4个副本只需要将2改为4
[root@k8smaster build-yaml]# kubectl scale replicaset nginx-set --replicas=2
replicaset.extensions/nginx-set scaled
[root@k8smaster build-yaml]# kubectl scale deployment nginx-deployment --replicas=3

[root@k8smaster build-yaml]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
nginx-deployment-5754944d6c   0         0         0       18h
nginx-deployment-6f655f5d99   0         0         0       18h
nginx-deployment-6f859b4555   3         3         2       18h
nginx-set                     0         0         0       18m
DESIRED：用户期望的 Pod 副本个数（spec.replicas 的值）；
CURRENT：当前处于 Running 状态的 Pod 的个数；

2、滚动更新

查看deployment/nginx-deployment的滚动更新状态
[root@k8smaster build-yaml]# kubectl rollout status deployment/nginx-deployment
Waiting for deployment "nginx-deployment" rollout to finish: 2 of 3 updated replicas are available...
在这个返回结果中，“2 out of 3 new replicas have been updated”意味着已经有 2 个 Pod 进入了 UP-TO-DATE 状态
修改 Deployment 有很多方法。比如，我可以直接使用 kubectl edit 指令编辑 Etcd 里的 API 对象。
[root@k8smaster build-yaml]# kubectl edit deployments/nginx-deployment
deployment.extensions/nginx-deployment edited
这个 kubectl edit 指令，会帮你直接打开 nginx-deployment 的 API 对象。然后，你就可以修改这里的 Pod 模板部分了。比如，在这里，我将 nginx 镜像的版本升级到了 1.9
kubectl edit 并不神秘，它不过是把 API 对象的内容下载到了本地文件，让你修改完成后再提交上去。
kubectl edit 指令编辑完成后，保存退出，Kubernetes 就会立刻触发“滚动更新”的过程。你还可以通过 kubectl rollout status 指令查看 nginx-deployment 的状态变化：
此时可用使用如下命令查看
[root@k8smaster build-yaml]# kubectl rollout status deployment/nginx-deployment
Waiting for deployment "nginx-deployment" rollout to finish: 1 out of 3 new replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 1 out of 3 new replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 1 out of 3 new replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 1 old replicas are pending termination...
也可以通过events查看滚动更新过程
[root@k8smaster build-yaml]# kubectl describe deployment nginx-deployment
Events:
  Type    Reason             Age                  From                   Message
  ----    ------             ----                 ----                   -------
  Normal  ScalingReplicaSet  28m (x2 over 32m)    deployment-controller  Scaled down replica set nginx-set to 1
  Normal  ScalingReplicaSet  17m (x2 over 27m)    deployment-controller  Scaled down replica set nginx-set to 0
  Normal  ScalingReplicaSet  16m (x2 over 38m)    deployment-controller  Scaled up replica set nginx-deployment-6f859b4555 to 3
  Normal  ScalingReplicaSet  9m7s                 deployment-controller  Scaled up replica set nginx-deployment-585d66c554 to 1
  Normal  ScalingReplicaSet  7m40s (x2 over 27m)  deployment-controller  Scaled down replica set nginx-deployment-6f859b4555 to 2
  Normal  ScalingReplicaSet  7m40s                deployment-controller  Scaled up replica set nginx-deployment-585d66c554 to 2
  Normal  ScalingReplicaSet  6m8s                 deployment-controller  Scaled down replica set nginx-deployment-6f859b4555 to 1
  Normal  ScalingReplicaSet  6m8s                 deployment-controller  Scaled up replica set nginx-deployment-585d66c554 to 3
如此交替进行，新 ReplicaSet 管理的 Pod 副本数，从 0 个变成 1 个，再变成 2 个，最后变成 3 个。而旧的 ReplicaSet 管理的 Pod 副本数则从 3 个变成 2 个，再变成 1 个，最后变成 0 个。这样，就完成了这一组 Pod 的版本升级过程。
像这样，将一个集群中正在运行的多个 Pod 版本，交替地逐一升级的过程，就是“滚动更新”。
使用如下命令查看新旧两个replicaset
[root@k8smaster build-yaml]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
nginx-deployment-5754944d6c   0         0         0       19h
nginx-deployment-585d66c554   3         3         2       14m
nginx-deployment-6f655f5d99   0         0         0       19h
nginx-deployment-6f859b4555   1         1         1       19h
nginx-set                     0         0         0       38m
这种滚动更新的好处
在升级刚开始的时候，集群里只有 1 个新版本的 Pod。如果这时，新版本 Pod 有问题启动不起来，那么“滚动更新”就会停止，
这也就要求你一定要使用 Pod 的 Health Check 机制检查应用的运行状态，而不是简单地依赖于容器的 Running 状态。要不然的话，虽然容器已经变成 Running 了，但服务很有可能尚未启动，“滚动更新”的效果也就达不到了。
这里使用的是rediniess健康检查
而为了进一步保证服务的连续性，Deployment Controller 还会确保，在任何时间窗口内，只有指定比例的 Pod 处于离线状态。同时，它也会确保，在任何时间窗口内，只有指定比例的新 Pod 被创建出来。这两个比例的值都是可以配置的，默认都是 DESIRED 值的 25%。

在上面这个 Deployment 的例子中，它有 3 个 Pod 副本，那么控制器在“滚动更新”的过程中永远都会确保至少有 2 个 Pod 处于可用状态，至多只有 4 个 Pod 同时存在于集群中。这个策略，是 Deployment 对象的一个字段，名叫 RollingUpdateStrategy，
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
...
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
在上面这个 RollingUpdateStrategy 的配置中，maxSurge 指定的是除了 DESIRED 数量之外，在一次“滚动”中，Deployment 控制器还可以创建多少个新 Pod；而 maxUnavailable 指的是，在一次“滚动”中，Deployment 控制器可以删除多少个旧 Pod。
这两个配置还可以用前面我们介绍的百分比形式来表示，比如：maxUnavailable=50%，指的是我们最多可以一次删除“50%*DESIRED 数量”个 Pod。
kubectl set image直接修改，不用edit打开编辑器，nginx版本给了一个不存在的版本
[root@k8smaster build-yaml]# kubectl set image deployment/nginx-deployment nginx=nginx:1.91
deployment.extensions/nginx-deployment image updated
拉取nginx：1.91这个版本的镜像时发生err，因为不存在该版本的镜像
[root@k8smaster build-yaml]# kubectl get pods
NAME                                READY   STATUS         RESTARTS   AGE
nginx-deployment-585d66c554-9lnsd   1/1     Running        0          23m
nginx-deployment-585d66c554-bbrnn   1/1     Running        0          24m
nginx-deployment-6875859965-6kxb2   0/1     ErrImagePull   0          78s
[root@k8smaster build-yaml]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
nginx-deployment-5754944d6c   0         0         0       19h
nginx-deployment-585d66c554   2         2         2       26m
nginx-deployment-6875859965   1         1         0       2m40s
nginx-deployment-6f655f5d99   0         0         0       19h
nginx-deployment-6f859b4555   0         0         0       19h
nginx-set                     0         0         0       50m
因为设置错误，需要回滚到上一个版本，执行如下命令回滚
[root@k8smaster build-yaml]# kubectl rollout undo deployment nginx-deployment 
deployment.extensions/nginx-deployment rolled back
首先，我需要使用 kubectl rollout history 命令，查看每次 Deployment 变更对应的版本。而由于我们在创建这个 Deployment 的时候，指定了–record 参数，所以我们创建这些版本时执行的 kubectl 命令，都会被记录下来
$ kubectl rollout history deployment/nginx-deployment
deployments "nginx-deployment"
REVISION    CHANGE-CAUSE
1           kubectl create -f nginx-deployment.yaml --record
2           kubectl edit deployment/nginx-deployment
3           kubectl set image deployment/nginx-deployment nginx=nginx:1.91
当然，你还可以通过这个 kubectl rollout history 指令，看到每个版本对应的 Deployment 的 API 对象的细节，具体命令如下所示：
$ kubectl rollout history deployment/nginx-deployment --revision=2
然后，我们就可以在 kubectl rollout undo 命令行最后，加上要回滚到的指定版本的版本号，就可以回滚到指定版本了。
$ kubectl rollout undo deployment/nginx-deployment --to-revision=2
deployment.extensions/nginx-deployment
上面的每次更新操作，都会产生一个新的replicaset对象，会浪费空间
可用执行如下命令，暂停deployment
[root@k8smaster build-yaml]# kubectl rollout pause deployment nginx-deployment 
deployment.extensions/nginx-deployment paused
暂停完后，可以进行多次更新
[root@k8smaster build-yaml]# kubectl set image deployment/nginx-deployment nginx=nginx:1.7
deployment.extensions/nginx-deployment image updated
[root@k8smaster build-yaml]# kubectl set image deployment/nginx-deployment nginx=nginx:1.8
deployment.extensions/nginx-deployment image updated
等待更新完后再恢复
[root@k8smaster build-yaml]# kubectl rollout resume deployment nginx-deployment 
deployment.extensions/nginx-deployment resumed
这样暂停进行多次更新再恢复，只会出发一次滚动更新，replicaset只会有一个
虽然可以减少replicaset数量，但是时间一长数量还是很多
可以使用spec.revisionHistoryLimit控制replicaset的数量，如果为0，就再也不能进行回滚操作了
Deployment 对象有一个字段，叫作 spec.revisionHistoryLimit，就是 Kubernetes 为 Deployment 保留的“历史版本”个数。

Deployment 实际上是一个两层控制器。首先，它通过 ReplicaSet 的个数来描述应用的版本；然后，它再通过 ReplicaSet 的属性（比如 replicas 的值），来保证 Pod 的副本数量。
Deployment 控制 ReplicaSet（版本），ReplicaSet 控制 Pod（副本数）。


